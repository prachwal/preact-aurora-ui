// Enhanced mixins for Aurora UI components
@use "./colors.scss" as *;
@use "./spacing.scss" as *;
@use "./typography.scss" as *;
@use "./breakpoints.scss" as *;

// Elevation mixin - Material Design inspired
@mixin elevation($level: 1) {
  @if $level ==0 {
    box-shadow: none;
  }

  @else if $level ==1 {
    box-shadow: var(--shadow-1);
  }

  @else if $level ==2 {
    box-shadow: var(--shadow-2);
  }

  @else if $level ==3 {
    box-shadow: var(--shadow-3);
  }

  @else if $level ==4 {
    box-shadow: var(--shadow-4);
  }
}

// Typography variants mixin
@mixin typography($variant) {
  @if $variant =='h1' {
    font-size: var(--font-size-3xl);
    font-weight: var(--font-weight-bold);
    line-height: var(--line-height-tight);
  }

  @else if $variant =='h2' {
    font-size: var(--font-size-2xl);
    font-weight: var(--font-weight-semibold);
    line-height: var(--line-height-tight);
  }

  @else if $variant =='h3' {
    font-size: var(--font-size-xl);
    font-weight: var(--font-weight-semibold);
    line-height: var(--line-height-base);
  }

  @else if $variant =='body1' {
    font-size: var(--font-size-base);
    font-weight: var(--font-weight-normal);
    line-height: var(--line-height-relaxed);
  }

  @else if $variant =='body2' {
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-normal);
    line-height: var(--line-height-base);
  }

  @else if $variant =='caption' {
    font-size: var(--font-size-xs);
    font-weight: var(--font-weight-normal);
    line-height: var(--line-height-base);
  }
}

// Responsive mixins - Mobile-first approach
@mixin respond-above($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  }

  @else {
    @warn "Unknown breakpoint: #{$breakpoint}";
  }
}

@mixin respond-below($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: #{map-get($breakpoints, $breakpoint) - 1px}) {
      @content;
    }
  }

  @else {
    @warn "Unknown breakpoint: #{$breakpoint}";
  }
}

@mixin respond-between($lower, $upper) {
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    @media (min-width: map-get($breakpoints, $lower)) and (max-width: #{map-get($breakpoints, $upper) - 1px}) {
      @content;
    }
  }

  @else {
    @warn "Unknown breakpoint(s): #{$lower}, #{$upper}";
  }
}

// Mobile-only mixin
@mixin mobile-only {
  @media (max-width: #{$breakpoint-sm - 1}) {
    @content;
  }
}

// Tablet and up
@mixin tablet-up {
  @media (min-width: $breakpoint-md) {
    @content;
  }
}

// Desktop and up
@mixin desktop-up {
  @media (min-width: $breakpoint-lg) {
    @content;
  }
}

// Hide scrollbar mixin (already exists, but enhanced)
@mixin hide-scrollbar {
  scrollbar-width: none;
  /* Firefox */
  -ms-overflow-style: none;
  /* IE 10+ */

  &::-webkit-scrollbar {
    display: none;
    /* Chrome, Safari, Opera */
  }
}

// Custom scrollbar styling
@mixin custom-scrollbar($width: 8px, $track-color: var(--color-surface-variant), $thumb-color: var(--color-outline)) {
  &::-webkit-scrollbar {
    width: $width;
  }

  &::-webkit-scrollbar-track {
    background: $track-color;
    border-radius: calc(#{$width} / 2);
  }

  &::-webkit-scrollbar-thumb {
    background: $thumb-color;
    border-radius: calc(#{$width} / 2);

    &:hover {
      background: var(--color-on-surface-variant);
    }
  }
}

// Smooth transitions mixin
@mixin smooth-transition($properties: all, $duration: 0.2s, $easing: cubic-bezier(0.4, 0, 0.2, 1)) {
  transition: $properties $duration $easing;
}

// Focus ring mixin for accessibility
@mixin focus-ring($color: var(--color-primary), $width: 2px, $offset: 2px) {
  &:focus-visible {
    outline: $width solid $color;
    outline-offset: $offset;
    border-radius: 4px;
  }
}

// Hover lift effect
@mixin hover-lift($translate: -2px, $shadow-level: 2) {
  @include smooth-transition(transform, box-shadow);

  &:hover {
    transform: translateY($translate);
    @include elevation($shadow-level);
  }
}

// Flex center mixin
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

// Flex between mixin
@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

// Absolute center mixin
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// Truncate text mixin
@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Multi-line truncate
@mixin truncate-lines($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// Aspect ratio mixin
@mixin aspect-ratio($ratio: 16/9) {
  aspect-ratio: $ratio;

  // Fallback for older browsers
  @supports not (aspect-ratio: 1) {
    position: relative;

    &::before {
      content: '';
      display: block;
      padding-top: percentage(1 / $ratio);
    }

    >* {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }
  }
}

// Button reset mixin
@mixin button-reset {
  background: none;
  border: none;
  padding: 0;
  margin: 0;
  font: inherit;
  color: inherit;
  cursor: pointer;
  outline: none;
}

// List reset mixin
@mixin list-reset {
  list-style: none;
  margin: 0;
  padding: 0;
}

// Visually hidden mixin (for screen readers)
@mixin visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

// Container mixin with max-width
@mixin container($max-width: 1200px, $padding: var(--space-lg)) {
  max-width: $max-width;
  margin: 0 auto;
  padding-left: $padding;
  padding-right: $padding;
  width: 100%;
  box-sizing: border-box;
}

// Glass morphism effect
@mixin glass-morphism($blur: 10px, $opacity: 0.1) {
  background: rgba(255, 255, 255, $opacity);
  backdrop-filter: blur($blur);
  -webkit-backdrop-filter: blur($blur);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

// Dark theme support
@mixin dark-theme {
  @media (prefers-color-scheme: dark) {
    :root:not([data-theme="light"]) & {
      @content;
    }
  }

  :root[data-theme="dark"] & {
    @content;
  }
}

// Light theme support
@mixin light-theme {
  @media (prefers-color-scheme: light) {
    :root:not([data-theme="dark"]) & {
      @content;
    }
  }

  :root[data-theme="light"] & {
    @content;
  }
}